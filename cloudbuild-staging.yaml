steps:
  # Step 1: Install frontend dependencies and run tests
  - name: 'node:22'
    entrypoint: npm
    args: ['install']
    dir: 'frontend'
    id: 'install-frontend-deps'

  - name: 'node:22'
    entrypoint: npm
    args: ['run', 'test:ci']
    dir: 'frontend'
    id: 'test-frontend'
    waitFor: ['install-frontend-deps']

  - name: 'node:22'
    entrypoint: npm
    args: ['run', 'lint']
    dir: 'frontend'
    id: 'lint-frontend'
    waitFor: ['install-frontend-deps']

  # Step 2: Install backend dependencies and run tests
  - name: 'node:22'
    entrypoint: npm
    args: ['ci']
    dir: 'backend'
    id: 'install-backend-deps'

  - name: 'node:22'
    entrypoint: npm
    args: ['run', 'test:ci']
    dir: 'backend'
    id: 'test-backend'
    waitFor: ['install-backend-deps']

  - name: 'node:22'
    entrypoint: npm
    args: ['run', 'lint']
    dir: 'backend'
    id: 'lint-backend'
    waitFor: ['install-backend-deps']

  # Step 3: Build frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [ 
      'build',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/frontend:$BUILD_ID',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/frontend:latest',
      'frontend/'
    ]
    id: 'build-frontend-image'
    waitFor: ['test-frontend', 'lint-frontend']

  # Step 4: Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:$BUILD_ID',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:latest',
      'backend/'
    ]
    id: 'build-backend-image'
    waitFor: ['test-backend', 'lint-backend']

  # Step 5: Security scan for frontend image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud artifacts docker images scan \
          ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/frontend:$BUILD_ID \
          --location=asia \
          --quiet
    id: 'scan-frontend-image'
    waitFor: ['build-frontend-image']

  # Step 6: Security scan for backend image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud artifacts docker images scan \
          ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:$BUILD_ID \
          --location=asia \
          --quiet
    id: 'scan-backend-image'
    waitFor: ['build-backend-image']

  # Step 7: Push frontend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/frontend']
    id: 'push-frontend-image'
    waitFor: ['scan-frontend-image']

  # Step 8: Push backend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend']
    id: 'push-backend-image'
    waitFor: ['scan-backend-image']


# Step 9: Deploy backend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy ${_APP_NAME}-${_ENVIRONMENT}-backend \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:$BUILD_ID \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=${_ENVIRONMENT}" \
          --cpu=1 \
          --memory=256Mi \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300 \
          --concurrency=80 \
          --no-traffic
    id: 'deploy-backend-no-traffic'
    waitFor: ['push-backend-image']

  # Step 10: Deploy frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get backend URL for frontend environment variable
        BACKEND_URL=$(gcloud run services describe ${_APP_NAME}-${_ENVIRONMENT}-backend \
          --region=${_REGION} \
          --format='value(status.url)')
        
        gcloud run deploy ${_APP_NAME}-${_ENVIRONMENT}-frontend \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/frontend:$BUILD_ID \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="REACT_APP_API_URL=$${BACKEND_URL}" \
          --cpu=1 \
          --memory=128Mi \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300 \
          --concurrency=80 \
          --no-traffic
    id: 'deploy-frontend-no-traffic'
    waitFor: ['push-frontend-image', 'deploy-backend-no-traffic']

 # Step 11: Health check backend
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the URL of the new revision (not receiving traffic yet)
        REVISION_URL=$(gcloud run services describe ${_APP_NAME}-${_ENVIRONMENT}-backend --region=${_REGION} --format='value(status.url)')
        
        echo "Testing backend health at: $${REVISION_URL}"
        
        # Wait for service to be ready and test health endpoint
        for i in {1..30}; do
          if curl -f "$${REVISION_URL}/api/health" > /dev/null 2>&1; then
            echo "Backend health check passed!"
            break
          fi
          echo "Attempt $i: Backend not ready, waiting 10 seconds..."
          sleep 10
        done
        
        # Final health check
        curl -f "$${REVISION_URL}/api/health" || exit 1
    id: 'health-check-backend'
    waitFor: ['deploy-backend-no-traffic']
 
 # Step 12: Health check frontend
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the URL of the new frontend revision
        REVISION_URL=$(gcloud run services describe ${_APP_NAME}-${_ENVIRONMENT}-frontend --region=${_REGION} --format='value(status.url)')
        
        echo "Testing frontend at: $${REVISION_URL}"
        
        # Wait for service to be ready
        for i in {1..30}; do
          if curl -f -s "$${REVISION_URL}" > /dev/null 2>&1; then
            echo "Frontend health check passed!"
            break
          fi
          echo "Attempt $i: Frontend not ready, waiting 10 seconds..."
          sleep 10
        done
        
        # Final health check
        curl -f -s "$${REVISION_URL}" || exit 1
    id: 'health-check-frontend'
    waitFor: ['deploy-frontend-no-traffic']


# Step 13: Switch traffic to new backend revision
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy ${_APP_NAME}-${_ENVIRONMENT}-backend \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:$BUILD_ID \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --timeout=60s \
    id: 'switch-backend-traffic'
    waitFor: ['health-check-backend']

  # Step 14: Switch traffic to new frontend revision
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy ${_APP_NAME}-${_ENVIRONMENT}-backend \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:$BUILD_ID \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --timeout=60s \
    id: 'switch-frontend-traffic'
    waitFor: ['health-check-frontend', 'switch-backend-traffic']

  # Step 15: Final smoke test
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Test the production URLs
        BACKEND_URL=$(gcloud run services describe ${_APP_NAME}-${_ENVIRONMENT}-backend \
          --region=${_REGION} \
          --format='value(status.url)')
        
        FRONTEND_URL=$(gcloud run services describe ${_APP_NAME}-${_ENVIRONMENT}-frontend \
          --region=${_REGION} \
          --format='value(status.url)')
        
        echo "Running final smoke tests..."
        echo "Backend URL: $${BACKEND_URL}"
        echo "Frontend URL: $${FRONTEND_URL}"
        
        # Test backend API
        curl -f "$${BACKEND_URL}/api/health" | jq .
        curl -f "$${BACKEND_URL}/api/hello" | jq .
        
        # Test frontend (just check it loads)
        curl -f -s "$${FRONTEND_URL}" > /dev/null
        
        echo "ðŸŽ‰ Deployment successful!"
        echo "Frontend: $${FRONTEND_URL}"
        echo "Backend: $${BACKEND_URL}"
    id: 'final-smoke-test'
    waitFor: ['switch-frontend-traffic']
   
   # Staging deployment steps
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy ${_APP_NAME}-staging-backend \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:$BUILD_ID \
          --region=${_REGION} \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=staging" \
          --cpu=1 \
          --memory=512Mi \
          --min-instances=0 \
          --max-instances=10  # Lower limits for staging
    id: 'deploy-staging-backend'
    waitFor: ['push-backend-image']
  
# Images to be pushed to registry
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/frontend:$BUILD_ID'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/frontend:latest'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:$BUILD_ID'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/backend:latest'

# Substitution variables
substitutions:
  _REGION: 'asia-southeast1'
  _REPOSITORY: 'fullstack-app-dev-repo'
  _APP_NAME: 'fullstack-app'
  _ENVIRONMENT: 'staging'

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

# Timeout
timeout: '1200s'

